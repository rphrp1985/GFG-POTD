class Solution{
    
    int ans=0;
    
    string s;
    
    int r,c,n;
    vector<vector<char> > v;
    bool isValid(int a,int b){
        
        if(a>=0 && a<r && b>=0 && b<c)
        return 1;
        return 0;
        
        
    }
    
       void dfs(int i,int a,int b,map<int,map<int,int>> vis){
           
           if(vis[a][b]!=0)
           return ;
           
           vis[a][b]=1;
          
           if(s[i]!= v[a][b]){
               return ;
               
           }
           
           
            if(i== s.length()-1)
           {
              ans++; 
            //   cout<<a<<" "<<b<<endl;
              return;
              
           }
           
           if( isValid(a+1,b)  ){
               dfs(i+1,a+1,b,vis);
           }
           
           
           
           if( isValid(a,b+1)  ){
               dfs(i+1,a,b+1,vis);
           }
           
           
           if( isValid(a-1,b)  ){
               dfs(i+1,a-1,b,vis);
           }
           
           
           if( isValid(a,b-1)  ){
               dfs(i+1,a,b-1,vis);
           }
           
           
           
       }
   
    
    public:
    int findOccurrence(vector<vector<char> > &mat, string target){
        r= mat.size();
        c= mat[0].size();
        s= target;
        n= s.length();
        
        ans=0;
        v= mat;
        
        map<int,map<int,int>> mp;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                dfs(0,i,j,mp);
            }
        }
        
        return ans;
        
    }
};
